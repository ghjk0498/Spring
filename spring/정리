@@@ java.lang.AssertionError: Content type expected:<application/json> but was:<application/json;charset=UTF-8> 	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:59) 	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:122) 	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:86) 	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:212) 	at spring.rest.web.RestApiTest.getTest(RestApiTest.java:48) 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.base/java.lang.reflect.Method.invoke(Method.java:568) 	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725) 	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60) 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131) 	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149) 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140) 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84) 	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115) 	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105) 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106) 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64) 	at org.junit.jupiter.engine.execution.InvocationInterceptorC
--- https://github.com/spring-projects/spring-framework/issues/14798
*** from *** .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON))
***  to  *** .andExpect(MockMvcResultMatchers.content().contentType CompatibleWith(MediaType.APPLICATION_JSON))

@@@ PostgreSQL 외부접근
--- https://gofogo.tistory.com/47
*** 기본적으로 localhost 수준에서 DB 접근을 허용하기 때문에 외부에서 접근하려면 pg_hba.conf 파일을 수정해야 함.
=================================================================================================================================
1. rest api에 로그인 필터 적용되지 않게 할 것. 요청할 때 로그인 필터가 적용되면 302 redirect와 함께 결과가 null이 나옴.
2. json으로 넘어온 데이터를 컨트롤러에서 @RequestBody로 받아야 함. @ModelAttribute로 받을 수 없음.
3. HiddenHttpMethodFilter : 스프링 3.0부터 제공해주는 필터로, PUT, DELETE, PATCH 요청을 _method를 통해 어떤 값인지 받아 올 수 있고 @Controller 단에 맵핑을 해준다.
HttpPutFormContentFilter : 기존 서블릿 스펙은 HTTP POST의 폼 데이터만 보낼 수 있게 정의되어 있는데, PUT, PATCH 도 특정 컨텐츠 타입(application/x-www-form-urlencoded)으로 폼 데이터를 보내오면 POST에서 꺼낼 수 있는 것처럼 Wrapping을 해준다.
참고 : https://wooody92.github.io/spring%20boot/Spring-Boot-HttpMessageConverters/